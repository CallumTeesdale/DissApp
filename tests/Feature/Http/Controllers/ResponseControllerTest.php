<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\ResponseController
 */
class ResponseControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        // $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('response.create'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        // $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = factory(\App\Response::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('response.destroy', [$response]));

        $response->assertOk();
        $this->assertDeleted($response);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        // $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = factory(\App\Response::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('response.edit', [$response]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        // $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('response.index'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        // $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $survey = factory(\App\Survey::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('response.show', $survey->id));

        $response->assertOk();
        $response->assertViewIs('render-survey');
        $response->assertViewHas('survey');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        // $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $decode = array(
            'userData' =>
            array(
                0 =>
                array(
                    'name' => 'text-1582312188170',
                    'type' => 'text',
                    'label' => 'Text Field',
                    'className' => 'form-control',
                    'userData' =>
                    array(
                        0 => 'test',
                    ),
                ),
            ),
            'survey_id' => 13,
        );
        $encode = json_encode($decode);
        $user = factory(\App\User::class)->create();
        $response = factory(\App\Response::class)->create();

        $data = '{"userData":[{"name":"text-1582312188170","type":"text","label":"Text Field","className":"form-control","userData":["test 123"]}],"survey_id":13}';
        $response = $this->actingAs($user)->postJson(route('response.store'), [
            // TODO: send request data
            $encode

        ]);

        $response->assertOk();
        //$response->assertViewIs('survey-response-success');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function success_returns_an_ok_response()
    {
        // $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('fail'));

        $response->assertOk();
        $response->assertViewIs('survey-response-success');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        // $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = factory(\App\Response::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('response.update', [$response]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}